#include "LoginPage.h"
#include "ui_LoginPage.h" // Generated by uic
#include "../../core/Database.h" // Added for database access
#include <QMessageBox> // Added for error dialogs
#include <iostream>

LoginPage::LoginPage(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::LoginPage)
{
    ui->setupUi(this);
}

LoginPage::~LoginPage()
{
    delete ui;
}

void LoginPage::on_pushButtonLogin_clicked()
{
    // Get the entered username and password
    QString username = ui->lineEditUsername->text();
    QString password = ui->lineEditPassword->text();

    // Validate input
    if (username.isEmpty() || password.isEmpty()) {
        QMessageBox::warning(this, "Login Error", "Username and password cannot be empty");
        return;
    }

    // Convert QString to std::string for Database API
    std::string usernameStr = username.toStdString();
    std::string passwordStr = password.toStdString();

    // Get database instance
    Database* db = Database::getInstance();
    
    // Try to get the account
    Account* account = db->getAccount(usernameStr);
    if (account) {
        // Hash the entered password and compare with stored hash
        std::string hashedPassword = Account::hashPassword(passwordStr);
        
        if (hashedPassword == account->getHashedPassword()) {
            // Login successful, emit signal with the account
            emit loginRequested(account);
        } else {
            // Password incorrect
            QMessageBox::warning(this, "Login Failed", "Incorrect password. Please try again.");
        }
    } else {
        // Account not found
        QMessageBox::warning(this, "Login Failed", "Account not found. Please check your username.");
    }
}

void LoginPage::on_pushButtonGoToRegister_clicked()
{
    emit navigateToRegisterRequested();
} 